#ifndef DATACLASS_H
#define DATACLASS_H
#include <list>
#include <map>

std::map<int, Node> NodeList;
std::map<int, Node> NodeList;
std::map<int, Customer> CustomerList; // CustomerList contains all the customers
int CustomerCount; //count the number of customers
Depot DepotStart;
Depot DepotEnd;
std::list<Path> PathList;
std::list<Solution> SolutionList;

 class Node // the class of all notes
 {
     int id; // this is the node id in the NodeList, start from zero
     int ExternalId; // the id from the raw data source
     double xcoord;
     double ycoord;
     double timeAtNode; //the time spent at the node, usually the service time
public:
     Node (int Id, double x, double y, double time);
     double Xcoord();
     double Ycoord();
     double TimeToNode(Node NodeTo);
     double TimeatNode();
 };

 class Depot : public Node
 {
 public:
     Depot(int externalId, double x, double y);
 };

 class Customer : public Node
 {
 private:
     double demand0;
     double ReadyTime0;
     double DueDate0;
     double StartServiceTime0;
 public:
     Customer(int ExternalId, double x, double y, double demand,
            double ReadyTime, double DueDate, double ServiceTime);
     double ReadyTime();
     double DueDate();
     double demand();
 };

 class Path
 {
 private:
     void CalculateCost();

 public:
     int id;
     std::list<Customer> CustomersVisited; // the list of customers have been visited in this path
     double cost; // the feasible path should start from the depot and end at the depot

     Path(std::list<Node> NewPath);
     // calculate the total cost of this path

     int CustomerInPath(Customer customer); // check if the customer is in the Path
     void displayInfo();
 };

 class Solution{

 };



#endif // DATA_H
